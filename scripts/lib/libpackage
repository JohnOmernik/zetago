#!/bin/bash
#
# Functions used in package management in Zeta
#
##############################################
#
# function stopsvc - Stops a given service
#
# Returns 0 if stopped successfully, 1 if already stopped, and 2 if doesn't exit
#
# Arguments
# $1 - The Return value 0 if the request to start or submit and start was successful. 1 if the app already existed and we did nothing
# $2 - Marathon ID to Start
# $3 - Marathon File to Submit/Start
# $4 - Marathon Submit URL to use
#
function stopsvc(){

    local RESULT=$1
    local MAR_ID=$2
    local MAR_FILE=$3
    local MAR=$4
    local RETVAL="0"

    CUR_STATUS=$(./zeta cluster marathon getinfo $MAR_ID "ALL" $MAR)
    EXISTS=$(echo $CUR_STATUS|grep "does not exist")
    if [ "$EXISTS" == "" ]; then
        RUNNING=$(echo $CUR_STATUS|grep "TASK_RUNNING")
        if [ "$RUNNING" != "" ]; then
            @go.log INFO "Scalling $MAR_ID to 0 instances"
            ./zeta cluster marathon scale $MAR_ID 0 $MAR 1
        else
            @go.log WARN "$MAR_ID is already stopped"
            RETVAL=1
        fi
    else
        @go.log WARN "MAR_ID does not exist in the given Marathon $MAR"
        RETVAL=2
    fi
}




#
# function submitstart - Starts a given service (or submits if it doesn't exist)
#
# Returns either a 0 (Submitted or started) or 1 (Exists and already running) via $1
#
# Arguments:
# $1 - The Return value 0 if the request to start or submit and start was successful. 1 if the app already existed and we did nothing
# $2 - Marathon ID to Start
# $3 - Marathon File to Submit/Start
# $4 - Marathon Submit URL to use
#
function submitstartsvc(){

    local RESULT=$1
    local MAR_ID=$2
    local MAR_FILE=$3
    local MAR=$4
    local RETVAL="0"


    @go.log INFO "Checking for presense of $MAR_ID"
    CUR_STATUS=$(./zeta cluster marathon getinfo $MAR_ID "ALL" $MAR)
    EXISTS=$(echo $CUR_STATUS|grep "does not exist")
    if [ "$EXISTS" != "" ]; then
        @go.log INFO "$MAR_ID Service Does not exist - Submitting"
        ./zeta cluster marathon submit ${MAR_FILE} ${MAR} 1
        @go.log INFO "$MAR_ID Initialization complete"
    else
        RUNNING=$(echo $CUR_STATUS|grep "TASK_RUNNING")
        if [ "$RUNNING" != "" ]; then
            @go.log WARN "$MAR_ID Already exists and is running"
            REVAL="1"
        else
            @go.log INFO "$MAR_ID exists, but not running - Starting"
            NUM_INSTS=$(cat $MAR_FILE |grep instances|cut -d":" -f2|sed "s/ //g"|sed "s/,//g")
            ./zeta cluster marathon scale $MAR_ID $NUM_INSTS $MAR 1
        fi
    fi

    eval $RESULT="'$RETVAL'"
}

#
# function checkdocker
#
# Check to ensure Docker tools are installed where the zetago instance is running so images can be built - If not fail with a FATAL
#
function checkdocker(){
    DOCKER_CHK=$(sudo docker info)
    if [ "$DOCKER_CHK" == "" ]; then
        @go.log FATAL "The ability to run docker client commands doesn't exist on this node, can't build this package"
    fi
}

#
#  function checkversbuild
#
# Check to see if the selected version file has already been built. If not, offer to build (or build if UNATTEND is 1). If the version isn't built, fail the install
#
# Arguments:
# $1 - App Name
# $2 - App Package Base
# $3 - Selected App Vers file
# $4 - Unattended install flag

function checkversbuild () {

    APP=$1
    PKG_BASE=$2
    VERS=$3
    UN=$4
    SEARCH=$5

    BUILDVERS="0"
    . ${PKG_BASE}/$VERS

    if [ "$APP_TGZ" != "" ]; then
        ROOT="$CLUSTERMOUNT/zeta/shared/$APP"
        ROOT_PKG="${ROOT}/packages"
        if [ ! -f "${ROOT_PKG}/$APP_TGZ" ]; then
            if [ "$UN" == "1" ]; then
                BUILDVERS="1"
            else
                read -e -p "APP_TGZ package specfied in supplied vers file ($VERS) doesn't exist. Should we rebuild? " -i "Y" BUILDVERS
            fi
            if [ "$BUILDVERS" == "0" ]; then
                @go.log FATAL "Can't installed the request package for $APP because $VERS is not build and user won't build it"
            fi
        fi
    fi
    if [ "$APP_IMG_NAME" != "" ]; then
        DCKCHK=$(sudo docker images|grep $APP_IMG_NAME)
        if [ "$DCKCHK" == "" ]; then
            @go.log WARN "$APP_IMG_NAME not detected on node, attempting to pull"
            sudo docker pull $APP_IMG
        fi
        DCKCHK=$(sudo docker images|grep $APP_IMG_NAME)
        if [ "$DCKCHK" == "" ]; then
            if [ "$UN" == "1" ]; then
                BUILDVERS="1"
            else
                read -e -p "APP_IMG_NAME package specfied in supplied vers file ($VERS) doesn't exist. Should we rebuild? " -i "Y" BUILDVERS
            fi
            if [ "$BUILDVERS" == "0" ]; then
                @go.log FATAL "Can't installed the request package for $APP because $VERS is not build and user won't build it"
            fi
        fi
    fi
    if [ "$BUILDVERS" == "1" ]; then
        if [ "$SEARCH" == "1" ]; then
            SA=" -s"
        else
            SA=""
        fi
        ./zeta package build -u -v=$VERS ${APP}${SA}
    fi

}

#
# function getversfile
#
# Determine the vers file either through what is passed in or via defaults depending on UNATTENDED flag
#
# Arguments
# $1 - The vers file passed in to check
# $2 - Unattended
# $3 - Default Vers File
# $4 - Package base dir
# $5 - App Name
# $6 - Return result

function getversfile() {

    VERS=$1
    UN=$2
    DEF=$3
    PKG_BASE=$4
    APP=$5
    RESULT=$6

    if [ "$VERS" == "" ]; then
        if [ "$UN" == "1" ] && [ -f "${PKG_BASE}/${DEF}" ]; then
            VERS="${DEF}"
        fi
    fi

    if [ "$VERS" == "" ] || [ ! -f "${PKG_BASE}/${VERS}" ]; then
        echo "Please select a vers file for $APP:"
        echo ""
        ls -1 ${PKG_BASE}/*.vers
        echo ""
        read -e -p "Please select Vers File for $APP: " -i "$DEF" VERS
        if [ ! -f "${PKG_BASE}/${VERS}" ]; then
            @go.log FATAL "${PKG_BASE}/${VERS} Not Found - Must select a valid vers file to continue to build packages"
        fi
    fi
    eval $RESULT="'$VERS'"


}



#
# function getpackagebase
#
# Using the core pkg location as well as additional package locations, try to determine where the base is for the requested package
#
# Arguments:
# $1 - APP_NAME
# $2 - Search the additional locations first
# $3 -  Result Var
#
function getpackagebase() {

    APP_NAME=$1
    SEARCH_ADD_FIRST=$2
    RESULT=$3
    MYRESULT=""

    if [ ! -d "${CORE_PKG_LOC}/${APP_NAME}" ] || [ "$SEARCH_ADD_FIRST" == "1" ]; then
        @go.log WARN "Package: $APP_NAME not found in core package location or search additional location first selected, checking additional package locations"
        for LOC in $ADD_PKG_LOC; do
            if [ -d "${LOC}/${APP_NAME}" ]; then
                MYRESULT="${LOC}/${APP_NAME}"
                break
                @go.log WARN "Using package $APP_NAME in $LOC"
            fi
        done
        if [ "$MYRESULT" == "" ]; then
            if [ -d "${CORE_PKG_LOC}/{$APP_NAME}" ]; then
                echo "Package $APP_NAME not found in Additional package location but it was found in the core package location, should we use the core package location?"
                read -e -p "Use Core Package Location version of $APP_NAME? " -i "Y" USECORE
                if [ "$USECORE" == "Y" ]; then
                    MYRESULT="${CORE_PKG_LOC}/${APP_NAME}"
                fi
            fi
        fi
    else
        @go.log INFO "Using Package $APP_NAME in Core Package Location"
        MYRESULT="${CORE_PKG_LOC}/${APP_NAME}"
    fi
    if [ "$MYRESULT" == "" ]; then
        @go.log FATAL "Package base for $APP_NAME could not be found - exiting"
    fi

     eval $RESULT="'$MYRESULT'"


}




#
# function check4package
#
# Arguments:
# The package to check for in $APP_PKG_DIR
#
function check4package() {

    CHKPKG=$1
    RESULT=$2
    @go.log INFO "Looking for $CHKPKG in $APP_PKG_DIR"
    if [ -f "$APP_PKG_DIR/$CHKPKG" ]; then
        @go.log WARN "$CHKPKG found in $APP_PKG_DIR"
        if [ "$REBUILD" != "1" ]; then
            read -e -p "Rebuild $CHKPKG? " -i "N" MYRESULT
        else
            MYRESULT="Y"
            @go.log WARN "Automatically rebuilding due to -u and -r flags being passed"
        fi
    else
        MYRESULT="Y"
    fi
    eval $RESULT="'$MYRESULT'"

}


#
# function check4dockerimage
#
# Arguments
# the Image name to check for
# the variable to return  the result in
#
function check4dockerimage(){

    CHKIMG=$1
    RESULT=$2
    @go.log INFO "Looking for $CHKIMG"
    IMG_CHK=$(sudo docker images|grep "$CHKIMG")
    if [ "$IMG_CHK" != "" ]; then
        @go.log WARN "$CHKIMG Found on this system"
        if [ "$REBUILD" != "1" ]; then
            read -e -p "Rebuild $CHKIMG? " -i "N" MYRESULT
        else
            MYRESULT="Y"
            @go.log WARN "Automatically rebuilding due to -u and -r flags both being passed"
        fi
    else
        MYRESULT="Y"
    fi

    eval $RESULT="'$MYRESULT'"

}

#
# function dockerprox
#
# Arguments:
# The Variable to put the docker proxy stuff in
#
function dockerprox() {

    RESULT=$1
    TMPOUT=""
    if [ "$ZETA_DOCKER_PROXY" != "" ]; then
        TMPOUT="${TMPOUT}ENV http_proxy=$ZETA_DOCKER_PROXY"$'\n'
        TMPOUT="${TMPOUT}ENV HTTP_PROXY=$ZETA_DOCKER_PROXY"$'\n'
        TMPOUT="${TMPOUT}ENV https_proxy=$ZETA_DOCKER_PROXY"$'\n'
        TMPOUT="${TMPOUT}ENV HTTPS_PROXY=$ZETA_DOCKER_PROXY"$'\n'
        TMPOUT="${TMPOUT}ENV no_proxy=$DOCKER_NOPROXY"$'\n'
        TMPOUT="${TMPOUT}ENV NO_PROXY=$DOCKER_NOPROXY"$'\n'
    else
        TMPOUT=""
    fi
    eval $RESULT="'$TMPOUT'"

}


#
# function reqdockerimg
#
# This function takes a space separated list of docker image names and checks to ensure they are local.
#
# Arguments:
# A Space separated list of images to require
function reqdockerimg() {

    REQ_IMGS="$1"


    for IMG in $REQ_IMGS; do
        ICHK=$(sudo docker images|grep "${IMG}")
        if [ "$ICHK" == "" ]; then
            @go.log WARN "Required Image $IMG not found on host - Should we attempt to pull the image?"
            read -e -p "Pull Image (Answering no here will allow you to build)? (Y/N): " -i "Y" PULLDCK
            TST=0
            if [ "$PULLDCK" == "Y" ]; then
                CCHK=$(echo "${IMG}"|grep ":")
                if [ "$CHK" == "" ]; then
                    PULLIMG="${IMG}:latest"
                else
                    PULLIMG="$IMG"
                fi
                sudo docker pull ${ZETA_DOCKER_REG_URL}/${PULLIMG}
                TST=$?
            fi
            if [ "$PULLDCK" != "Y" ] || [ "$TST" != 0 ]; then
                echo "Required image not on host (perhaps even after pull attempt). Should we attempt to build with ./zeta package build $IMG ?"
                read -e -p "Try to build required image? (Y/N): " -i "Y" DCK
                if [ "$DCK" != "Y" ]; then
                    @go.log FATAL "Cannont continue installed of $APP_NAME without image $IMG"
                fi
                ./zeta package build $IMG
            fi
        fi
    done

}
