#!/bin/bash
#
# Install Shared LDAP Server for Zeta installations
#
#

sourceconf "$PREP_CONF"
sourceconf "$DCOS_CONF"
sourceconf "$NETWORK_CONF"
sourceconf "$FS_CONF"
sourceconf "$FS_PROVIDER_CONF"
sourceconf "$CLUSTER_CONF"
sourceconf "$CLUSTER_ZETACA_CONF"
sourceconf "$CLUSTER_BASE_CONF"

reqshared "dockerregv2"

function _installldap() {

    . $CLUSTERMOUNT/zeta/kstore/env/zeta_shared.sh

    CURUSER=$(whoami)

    if [ "$CURUSER" != "${IUSER}" ]; then
        echo "Must use ${IUSER}: User: $CURUSER"
    fi

    if [ ! -d "$CLUSTERMOUNT/zeta/shared/zetaca" ]; then
        @go.log WARN "zetaca not yet moved to shared location"
        read -e -p "Should we invoke ./zeta cluster zetaca final to move zeta to final location? " -i "Y" MOVECA
        if [ "$MOVECA" != "Y" ]; then
            @go.log FATAL "Cannot proceed with openldap install until CA is moved to final locaiton with ./zeta cluster zetaca final"
        fi
        ./zeta cluster zetaca final
    fi

    APP_IMG="${ZETA_DOCKER_REG_URL}/openldap:1.0.0"

    SOURCE_GIT="https://github.com/osixia/docker-openldap.git"

    DCK=$(sudo docker images|grep openldap)

    if [ "$DCK" == "" ]; then
        BUILD="Y"
    else
        @go.log WARN "openldap image detected $DCK - rebuild?"
        read -e -p "Rebuild? " -i "N" BUILD
    fi
    if [ "$BUILD" == "Y" ]; then

        git clone $SOURCE_GIT
        cd docker-openldap
        cd image

cat > sasldauthd << EOS
# Settings for saslauthd daemon
# Please read /usr/share/doc/sasl2-bin/README.Debian for details.
#

# Should saslauthd run automatically on startup? (default: no)
START=yes

# Description of this saslauthd instance. Recommended.
# (suggestion: SASL Authentication Daemon)
DESC="SASL Authentication Daemon"

# Short name of this saslauthd instance. Strongly recommended.
# (suggestion: saslauthd)
NAME="saslauthd"

# Which authentication mechanisms should saslauthd use? (default: pam)
#
# Available options in this Debian package:
# getpwent  -- use the getpwent() library function
# kerberos5 -- use Kerberos 5
# pam       -- use PAM
# rimap     -- use a remote IMAP server
# shadow    -- use the local shadow password file
# sasldb    -- use the local sasldb database file
# ldap      -- use LDAP (configuration is in /etc/saslauthd.conf)
#
# Only one option may be used at a time. See the saslauthd man page
# for more information.
#
# Example: MECHANISMS="pam"
MECHANISMS="ldap"

# Additional options for this mechanism. (default: none)
# See the saslauthd man page for information about mech-specific options.
MECH_OPTIONS=""

# How many saslauthd processes should we run? (default: 5)
# A value of 0 will fork a new process for each connection.
THREADS=5

# Other options (default: -c -m /var/run/saslauthd)
# Note: You MUST specify the -m option or saslauthd won't run!
#
# WARNING: DO NOT SPECIFY THE -d OPTION.
# The -d option will cause saslauthd to run in the foreground instead of as
# a daemon. This will PREVENT YOUR SYSTEM FROM BOOTING PROPERLY. If you wish
# to run saslauthd in debug mode, please run it by hand to be safe.
#
# See /usr/share/doc/sasl2-bin/README.Debian for Debian-specific information.
# See the saslauthd man page and the output of 'saslauthd -h' for general
# information about these options.
#
# Example for chroot Postfix users: "-c -m /var/spool/postfix/var/run/saslauthd"
# Example for non-chroot Postfix users: "-c -m /var/run/saslauthd"
#
# To know if your Postfix is running chroot, check /etc/postfix/master.cf.
# If it has the line "smtp inet n - y - - smtpd" or "smtp inet n - - - - smtpd"
# then your Postfix is running in a chroot.
# If it has the line "smtp inet n - n - - smtpd" then your Postfix is NOT
# running in a chroot.
OPTIONS="-O /etc/sasld/saslauth.conf -c -m /var/run/saslauthd"

EOS




        if [ "$DOCKER_PROXY" != "" ]; then
            DOCKER_LINE1="ENV http_proxy=$DOCKER_PROXY"
            DOCKER_LINE2="ENV HTTP_PROXY=$DOCKER_PROXY"
            DOCKER_LINE3="ENV https_proxy=$DOCKER_PROXY"
            DOCKER_LINE4="ENV HTTPS_PROXY=$DOCKER_PROXY"
            DOCKER_LINE5="ENV NO_PROXY=$DOCKER_NOPROXY"
            DOCKER_LINE6="ENV no_proxy=$DOCKER_NOPROXY"

            sed -i "/MAINTAINER /a $DOCKER_LINE6" Dockerfile
            sed -i "/MAINTAINER /a $DOCKER_LINE5" Dockerfile
            sed -i "/MAINTAINER /a $DOCKER_LINE4" Dockerfile
            sed -i "/MAINTAINER /a $DOCKER_LINE3" Dockerfile
            sed -i "/MAINTAINER /a $DOCKER_LINE2" Dockerfile
            sed -i "/MAINTAINER /a $DOCKER_LINE1" Dockerfile
        fi
        sed -i "s/RUN groupadd -r openldap/RUN groupadd -g 2500 openldap/" ./Dockerfile
        sed -i "s/useradd -r -g openldap/useradd -u 2500 -g openldap/" ./Dockerfile

        sed -i "s/openssl/openssl sasl2-bin nano/" ./Dockerfile
        sed -i "/ADD environment/a RUN usermod -a -G sasl openldap" ./Dockerfile
        sed -i "/ADD environment/a RUN mkdir -p /etc/sasld && touch /etc/sasld/saslauth.conf" ./Dockerfile
        sed -i "/ADD environment/a ADD saslauthd /etc/default" ./Dockerfile
        sed -i "/ADD environment/a RUN mkdir -p /usr/lib/sasl2 && echo \"pwcheck_method: saslauthd\" > /usr/lib/sasl2/slapd.conf && echo \"saslauthd_path: /var/run/saslauthd/mux\" >> /usr/lib/sasl2/slapd.conf" ./Dockerfile
        sed -i "/ADD environment/a RUN sed -i \"/set -o pipefail/a /etc/init.d/saslauthd start\" /container/service/slapd/startup.sh" ./Dockerfile









        sudo docker build -t $APP_IMG .
        sudo docker push $APP_IMG
        cd ..
        cd ..
        rm -rf docker-openldap
    fi


    APP_ROOT="$CLUSTERMOUNT/zeta/shared/openldap"

    if [ -d "$APP_ROOT" ]; then
        @go.log FATAL "OpenLDAP Root at $APP_ROOT already exists. Refusing to go on..."
    fi

    getpass "ldapadmin" LDAP_PASS


    mkdir -p ${APP_ROOT}
    mkdir -p ${APP_ROOT}/ldap
    mkdir -p ${APP_ROOT}/slapd.d
    mkdir -p ${APP_ROOT}/ldapmod
    mkdir -p ${APP_ROOT}/initconf
    mkdir -p ${APP_ROOT}/certs

    sudo chown -R ${IUSER}:${IUSER} ${APP_ROOT}
    sudo chmod -R 750 ${APP_ROOT}
    APP_NAME="openldap"
    APP_CERT_LOC="${APP_ROOT}/certs"
    CN_GUESS="openldap-shared.marathon.slave.mesos"


    . $CLUSTERMOUNT/zeta/shared/zetaca/gen_server_cert.sh


    @go.log INFO "Adding OpenLDAP Ports to $SERVICES_CONF"
    echo "CLUSTER:tcp:389:shared:openldap:OpenLDAP Port" >> $SERVICES_CONF
    echo "CLUSTER:tcp:636:shared:openldap:OpenLDAP SSL Port" >> $SERVICES_CONF


cat > $CLUSTERMOUNT/zeta/kstore/env/env_shared/openldap.sh << EOL
export ZETA_OPENLDAP_HOST="openldap-shared.marathon.slave.mesos"
export ZETA_OPENLDAP_PORT="389"
export ZETA_OPENLDAP_SECURE_PORT="636"
EOL


cat > ${APP_ROOT}/initconf/default.yaml << EOL1
# This is the default image configuration file
# These values will persists in container environment.

# All environment variables used after the container first start
# must be defined here.
# more information : https://github.com/osixia/docker-light-baseimage

# General container configuration
# see table 5.1 in http://www.openldap.org/doc/admin24/slapdconf2.html for the available log levels.
LDAP_LOG_LEVEL: 256

LDAP_ORGANISATION: $CLUSTERNAME
LDAP_DOMAIN: marathon.mesos
LDAP_BASE_DN: dc=marathon,dc=mesos
LDAP_ADMIN_PASSWORD: $LDAP_PASS
LDAP_READONLY_USER: true
LDAP_READONLY_USER_USERNAME: readonly
LDAP_READONLY_USER_PASSWORD: readonly

EOL1

cat > ${APP_ROOT}/initconf/default.yaml.startup << EOL2
# This is the default image configuration file
# These values will persists in container environment.

# All environment variables used after the container first start
# must be defined here.
# more information : https://github.com/osixia/docker-light-baseimage

LDAP_ORGANISATION: $CLUSTERNAME
LDAP_DOMAIN: marathon.mesos
LDAP_BASE_DN: dc=marathon,dc=mesos
LDAP_ADMIN_PASSWORD: $LDAP_PASS
LDAP_READONLY_USER: true
LDAP_READONLY_USER_USERNAME: readonly
LDAP_READONLY_USER_PASSWORD: readonly
EOL2

    sudo chmod +x $CLUSTERMOUNT/zeta/kstore/env/env_shared/openldap.sh

    MARFILE="${APP_ROOT}/marathon.json"

cat > $MARFILE << EOF
{
  "id": "shared/openldap",
  "cpus": 1,
  "mem": 1024,
  "env": {
            "HOSTNAME":"openldap-shared.marathon.slave.mesos",
            "LDAP_TLS_CRT_FILENAME":"cert.pem",
            "LDAP_TLS_KEY_FILENAME":"key-no-password.pem",
            "LDAP_TLS_CA_CRT_FILENAME":"cacert.pem",
            "LDAP_BACKED": "mdb"
         },
  "instances": 1,
  "labels": {
   "CONTAINERIZER":"Docker"
  },
  "ports": [],
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "${APP_IMG}",
      "network": "HOST"
    },
    "volumes": [
      { "containerPath": "/var/lib/ldap", "hostPath": "${APP_ROOT}/ldap", "mode": "RW" },
      { "containerPath": "/container/service/slapd/assets/certs", "hostPath": "${APP_ROOT}/certs", "mode": "RW" },
      { "containerPath": "/tmp/ldapmod", "hostPath": "${APP_ROOT}/ldapmod", "mode": "RW" },
      { "containerPath": "/etc/ldap/slapd.d", "hostPath": "${APP_ROOT}/slapd.d", "mode": "RW" },
      { "containerPath": "/etc/sasld", "hostPath": "${APP_ROOT}/sasld", "mode": "RW" },
      { "containerPath": "/container/environment/02-custom", "hostPath": "${APP_ROOT}/initconf", "mode": "RO" }
    ]
  }
}
EOF

    # Add this to Docker file to increase container logginer (remove the bash comments)
    #  "args":[
    #  "--loglevel", "debug"
    #  ],


    ./zeta cluster marathon submit "$MARFILE" "$MARATHON_SUBMIT" 1
    echo ""
    @go.log INFO "Shared LDAP Server installed"

}

_installldap "$@"

