#!/bin/bash
#
# adds the shared role to Zeta Schemas
#
sourceconf "$PREP_CONF"
sourceconf "$DCOS_CONF"
sourceconf "$NETWORK_CONF"
sourceconf "$FS_CONF"
sourceconf "$FS_PROVIDER_CONF"
sourceconf "$CLUSTER_CONF"
sourceconf "$CLUSTER_ZETACA_CONF"
sourceconf "$CLUSTER_BASE_CONF"

reqshared "dockerregv2 zetaca openldap"

# Load the FS lib for this cluster
FS_LIB="lib${FS_PROVIDER}"
. "$_GO_USE_MODULES" $FS_LIB

function _displayhelp(){
    echo "cluster addzetarole - Creates a new role in Zeta Architecture"
    echo "===================================================================================================="
    echo ""
    echo "Arguments:"
    echo "-r=\"%ROLENAME%\"  - Add the role %ROLENAME%"
    echo "-h                 - Display this help"
    echo "-u                 - Unattended"
    echo ""
    echo "Usage:"
    echo "./zeta cluster addzetarole -r=\"prod\""
    echo ""
}


function _addzetarole() {
    . $CLUSTERMOUNT/zeta/kstore/env/zeta_shared.sh
    DISPLAYHELP="0"
    UNATTEND="0"
    for i in "$@"
        do
        case $i in
            -u)
            UNATTEND="1"
            ;;
            -h)
            DISPLAYHELP="1"
            ;;
            "-r="*)
            ROLE="${i#*=}"
            ;;
            *)
            # unknown option
            ;;
        esac
    done
    if [ "$DISPLAYHELP" == "1" ]; then
        _displayhelp
        exit 0
    fi
    if [ "$ROLE" == "" ]; then
        @go.log FATAL "Must pass a role to add with -r="
    fi

    @go.log INFO "Adding LDAP Role Schema for $ROLE"
    ./zeta users roleschema -a -r="$ROLE" -u

    @go.log INFO "Adding Role Directories"

    RDS=$(echo "$ROOT_DIRS"|tr "," " ")

    for DIR in $RDS; do
        ROLE_OWNER="${IUSER}:zeta${ROLE}${DIR}"
        if [ -d "$CLUSTERMOUNT/$DIR/$ROLE" ]; then
            @go.log WARN "${DIR}/${ROLE} directory already exists - Updating permissions to be $ROLE_OWNER"
            sudo chown ${ROLE_OWNER} $CLUSTERMOUNT/$DIR/$ROLE
        else
            @go.log INFO "Creating $CLUSTERMOUNT/$DIR/${ROLE}"
            fs_mkvol "RETCODE" "/${DIR}/${ROLE}" "${DIR}.${ROLE}" "770"
            sudo chown ${ROLE_OWNER} ${CLUSTERMOUNT}/$DIR/$ROLE
        fi
    done




    DIR="${CLUSTERMOUNT}/zeta/kstore/env/env_${ROLE}"
    sudo mkdir -p $DIR
    sudo chown ${IUSER}:${IUSER} $DIR
    sudo chmod 775 $DIR
    ENV_FILE="${CLUSTERMOUNT}/zeta/kstore/env/zeta_${ROLE}.sh"

cat > $ENV_FILE << EOL3
# Source Master Zeta ENV File
. ${CLUSTERMOUNT}/zeta/kstore/env/master_env.sh
# START GLOBAL ENV Variables for Zeta Environment

export ZETA_MARATHON_ENV="marathon${ROLE}"
export ZETA_MARATHON_HOST="\${ZETA_MARATHON_ENV}.\${ZETA_MESOS_DOMAIN}"
export ZETA_MARATHON_PORT="error" # Fix this
export ZETA_MARATHON_URL="\$ZETA_MARATHON_HOST:\$ZETA_MARATHON_PORT"
export ZETA_MARATHON_SUBMIT="http://\$ZETA_MARATHON_URL/v2/apps"
# Source env_$ROLE
for SRC in ${CLUSTERMOUNT}/zeta/kstore/env/env_${ROLE}/*.sh; do
   . \$SRC
done

if [ "\$1" == "1" ]; then
    env|grep -P "^ZETA_"
fi

EOL3

    chmod +x $ENV_FILE

    #Create a dummy script in the env_prod directory so that file not found errors don't appear when sourcing main file
cat > ${CLUSTERMOUNT}/zeta/kstore/env/env_${ROLE}/env_${ROLE}.sh << EOL5
#!/bin/bash
# Basic script to keep file not found errors from happening
EOL5
    @go.log INFO "Role: $ROLE Added to Zeta"
}
_addzetarole "$@"
