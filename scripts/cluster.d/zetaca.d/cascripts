#!/bin/bash
#
# certscripts - Create the certificate creation scripts for use in packages etc.
#
sourceconf "$PREP_CONF"
sourceconf "$DCOS_CONF"
sourceconf "$NETWORK_CONF"
sourceconf "$FS_CONF"
sourceconf "$FS_PROVIDER_CONF"
sourceconf "$CLUSTER_CONF"
sourceconf "$CLUSTER_ZETACA_CONF"


cat > $ZETACA_HOME/gen_server_cert.sh << EOSCA
#!/bin/bash
CLUSTERNAME=$CLUSTERNAME
if [ -f "$CLUSTERMOUNT/zeta/kstore/env/zeta_shared.sh" ]; then
    . $CLUSTERMOUNT/zeta/kstore/env/zeta_shared.sh
else
    echo "No Shared Location"
fi

if [ -z "\$APP_NAME" ]; then
    echo "APP_NAME is Not Set using default of Custom"
    APP_NAME="Custom"
fi
if [ -z "\$APP_CERT_LOC" ]; then
    echo "The location to generate the certificates is not set please provide:"
    read -e -p "Path to deposit Certificates: " APP_CERT_LOC
    if [ ! -d "\${APP_CERT_LOC}" ]; then
        echo "The location: \$APP_CERT_LOC doesn't exist, should we create?"
        read -e -p "Create \${APP_CERT_LOC}? " -i "N" CREATE_LOC
        if [ "\$CREATE_LOC" == "Y" ]; then
            mkdir -p \$APP_CERT_LOC
        else
            echo "Exiting"
            exit 1
        fi
    fi
    if [ -f "\${APP_CERT_LOC}/request.csr" ]; then
        echo "A Certificate request already exists there, will not proceed"
        exit 1
    fi
fi
if [ -z "\$CN_GUESS" ]; then
    if [ -z "\${APP_ID}" ] || [ -z "\${APP_ROLE}" ] || [ -z "\${APP_DOMAIN_ROOT}" ]; then
        CN_GUESS="Enter CN for App"
    else
        CN_GUESS="\${APP_ID}-\${APP_ROLE}.\${APP_DOMAIN_ROOT}"
    fi
fi
echo ""
echo "We will now generate a SSL Certificate using ZetaCA"
echo ""
echo ""
read -e -p "\$APP_NAME Certificate Country (C): " -i "\$ZETA_CERT_C" CERT_C
echo ""
read -e -p "\$APP_NAME Certificate State (ST): " -i "\$ZETA_CERT_ST" CERT_ST
echo ""
read -e -p "\$APP_NAME Certificate Location (L): " -i "\$ZETA_CERT_L" CERT_L
echo ""
read -e -p "\$APP_NAME Certificate Organization (O): " -i "\$ZETA_CERT_O" CERT_O
echo ""
read -e -p "\$APP_NAME Certificate Organizational Unit (OU): " -i "\$ZETA_CERT_OU" CERT_OU
echo ""
echo "The suggested CN here is based off the specifics for this app, and it's recommended you use this default or change if you know what you are doing!"
echo ""
read -e -p "\$APP_NAME Certificate Common Name (CN): " -i "\$CN_GUESS" CERT_CN 
echo ""
echo "Generating CA Request"
APP_CERT_REQ="\${APP_CERT_LOC}/request.csr"
APP_CERT_KEY="\${APP_CERT_LOC}/key-no-password.pem"
APP_CERT_SRV="\${APP_CERT_LOC}/srv_cert.pem"
APP_CERT="\${APP_CERT_LOC}/cert.pem"
APP_CERT_CA="\${APP_CERT_LOC}/cacert.pem"
APP_CERT_SUB="/C=\${CERT_C}/ST=\${CERT_ST}/L=\${CERT_L}/O=\${CERT_O}/OU=\${CERT_OU}/CN=\${CERT_CN}"
#APP_CERT_SUB="/C=\${CERT_C}/ST=\${CERT_ST}/L=\${CERT_L}/O=\${CERT_O}/OU=\${CERT_OU}/CN=\${CERT_CN}/subjectAltName=DNS.1=\${CERT_CN}"

openssl req -nodes -newkey rsa:2048 -keyout \${APP_CERT_KEY} -out \${APP_CERT_REQ} -subj "\$APP_CERT_SUB"

echo ""
echo "Generating Cert"
curl -o \${APP_CERT_SRV} -F "file=@\${APP_CERT_REQ}" \${ZETA_CA_CSR}
curl -o \${APP_CERT_CA} \${ZETA_CA_CERT}
cat \${APP_CERT_SRV} \${APP_CERT_CA} > \${APP_CERT}
EOSCA

chmod +x ${ZETACA_HOME}/gen_server_cert.sh

@go.log INFO "Standard cert script created"

cat > ${ZETACA_HOME}/gen_java_keystore.sh << EOJKS
#!/bin/bash
# Now convert to JKS for Drill
JAVA_HOME="/opt/mesosphere/active/java/usr/java"
PATH=\$PATH:\$JAVA_HOME/bin
CLUSTERNAME=$CLUSTERNAME
. $CLUSTERMOUNT/zeta/shared/zetaca/gen_server_cert.sh

# Create a single file with both key and cert in pem

APP_KEYCERT_PEM="\${APP_CERT_LOC}/keycert.pem"
APP_CERT_PKCS12="\${APP_CERT_LOC}/keycert.pkcs12"
APP_CERT_CA_DER="\${APP_CERT_LOC}/cacert.crt"

APP_KEYSTORE="\${APP_CERT_LOC}/myKeyStore.jks"
APP_TRUSTSTORE="\${APP_CERT_LOC}/myTrustStore.jts"

APP_KEY_PASS="\${APP_CERT_LOC}/keypass"
APP_TRUST_PASS="\${APP_CERT_LOC}/trustpass"

echo "We need a password for the trust store"
echo ""
echo "***** Note: This password will be echoed on the screen *****"
echo ""
read -e -p "Truststore Password: " TRUSTSTOREPASS
echo ""
echo "We need a password for the key store"
echo ""
echo "***** Note: This password will be echoed on the screen *****"
echo ""
read -e -p "Keystore Password: " KEYSTOREPASS
echo ""
echo -n "\$TRUSTSTOREPASS" > \${APP_TRUST_PASS}
echo -n "\$KEYSTOREPASS" > \${APP_KEY_PASS}


# Cat the Cert and Key together
cat \${APP_CERT_KEY} \${APP_CERT_SRV} \${APP_CERT_CA} > \${APP_KEYCERT_PEM}
# Convert the cacert.pem into der format.
openssl x509 -in \${APP_CERT_CA} -inform pem -out \${APP_CERT_CA_DER} -outform der
# Create the new Trust Store
keytool -import -file \${APP_CERT_CA_DER} -alias mainca -keystore \${APP_TRUSTSTORE} -storepass:file \${APP_TRUST_PASS} -noprompt
# Convert the cert to pkcs12 file
openssl pkcs12 -export -in \${APP_KEYCERT_PEM} -out \${APP_CERT_PKCS12} -name mycert -noiter -nomaciter -passout file:\${APP_KEY_PASS}
# Add Drill Cert to the keystore
keytool -importkeystore -destkeystore \${APP_KEYSTORE} -deststorepass:file \${APP_KEY_PASS} -srckeystore \${APP_CERT_PKCS12} -srcstoretype pkcs12 -srcstorepass:file \${APP_KEY_PASS} -alias mycert
# Add CA Cert to the trust store...
keytool -import -trustcacerts -file \${APP_CERT_CA_DER} -alias mainca -keystore \${APP_KEYSTORE} -storepass:file \${APP_KEY_PASS} -noprompt
rm \${APP_KEY_PASS}
rm \${APP_TRUST_PASS}

cat > \${APP_CERT_LOC}/capass << EOF
#!/bin/bash
export TRUSTSTOREPASS="\$TRUSTSTOREPASS"
export KEYSTOREPASS="\$KEYSTOREPASS"

EOF

EOJKS
chmod +x ${ZETACA_HOME}/gen_java_keystore.sh

@go.log INFO "Java Keystore Script Created"


cat > ${ZETACA_HOME}/CA/init_ca.sh << EOL1
#!/bin/bash
/root/ca_rest/01_create_ca_files_and_databases.sh /root/ca_rest/CA
EOL1
chmod +x ${ZETACA_HOME}/CA/init_ca.sh

cat > ${ZETACA_HOME}/CA/init_all.sh << EOL2
#!/bin/bash
chown -R ${IUSER}:${IUSER} /root
su ${IUSER} -c /root/ca_rest/CA/init_ca.sh
EOL2
chmod +x ${ZETACA_HOME}/CA/init_all.sh



cat > ${ZETACA_HOME}/marathon.json << EOL4
{
  "id": "shared/zetaca",
  "cpus": 1,
  "mem": 384,
  "cmd":"/bin/bash -l -c '/root/ca_rest/main.rb'",
  "instances": 1,
  "constraints": [["hostname", "LIKE", "$ZETACA_IP"]],
  "env": {
     "SERVER_PORT": "3000",
     "CA_ROOT": "/root/ca_rest/CA"
  },
  "labels": {
   "CONTAINERIZER":"Docker"
  },
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "${ZETACA_IMG}",
      "network": "BRIDGE",
      "portMappings": [
        { "containerPort": 3000, "hostPort": ${ZETA_CA_PORT}, "servicePort": 0, "protocol": "tcp"}
      ]
    },
  "volumes": [
      {
        "containerPath": "/root/ca_rest/CA",
        "hostPath": "${ZETACA_HOME}/CA",
        "mode": "RW"
      }
    ]
  }
}

EOL4
@go.log INFO "Marathon submit script created"
