#!/bin/bash
#
# marathon scale
# This takes two arguments
# - Marathon ID
# - Desired number of instances
# - MARATHON Submit URL
# - Optional - Wait for deployments (pass 1 if you want to wait)
#
# Example: ./zeta cluster marathon scale  myrole/myapp 1 http://marathon.mesos:8080/v2/apps
sourceconf "$PREP_CONF"
sourceconf "$DCOS_CONF"
sourceconf "$NETWORK_CONF"
sourceconf "$FS_CONF"
sourceconf "$FS_PROVIDER_CONF"
sourceconf "$CLUSTER_CONF"

function _marathon_scale() {



    MARID=$1
    NUM_INST=$2
    MARATHON_URL=$3
    if [ "$MARATHON_URL" != "" ]; then
        if [ "$MARATHON_URL" == "1" ]; then
            WAIT="1"
            MARATHON_URL=""
        else
            WAIT=$4
        fi
    fi
    if [ "$MARATHON_URL" == "" ]; then
        @go.log WARN "No MARATHON_URL provided using cluster default in $CLUSTER_CONF"
        MARATHON_HOST="$MARATHON_HOST"
    fi
    MARATHON_URL="http://${MARATHON_HOST}/v2/groups"

    MARATHON_DEP="http://$MARATHON_HOST/v2/deployments"
    OUT=$(curl -s -H "Content-type: application/json" -X PUT ${MARATHON_URL}/${MARID} -d'{"instances":'"${NUM_INST}"'}')
    DEP_ID=$(echo $OUT|grep -P -o "deploymentId\":\"[^\"]+\""|cut -f2 -d":"|sed "s/\"//g")

    if [ "$WAIT" == "1" ]; then
        @go.log INFO "Waiting for scale request on ID $MARID to finish deployment with ID $DEP_ID"
        echo ""
        DEPLOY=$(curl -s -H "Content-type: application/json" -X GET ${MARATHON_DEP}|grep "$DEP_ID")
        while [ "$DEPLOY" != "" ]; do
            echo "Waiting in a loop for Deployment: $DEP_ID to finish"
            sleep 2
            DEPLOY=$(curl -s -H "Content-type: application/json" -X GET ${MARATHON_DEP}|grep "$DEP_ID")
        done
        echo ""
        @go.log INFO "Scale Deployement with ID $DEP_ID complete"
    else
        @go.log INFO "Scale Deployment for $MARID to $NUM_INST submitted - Not waiting to finish deployment"
    fi

}

_marathon_scale "$@"







