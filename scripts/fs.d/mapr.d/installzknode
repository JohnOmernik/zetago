#!/bin/bash
#
# mapr installzknode
# Install Zookeeper on nodes a specific node
#

sourceconf "$PREP_CONF"
sourceconf "$DCOS_CONF"
sourceconf "$NETWORK_CONF"
sourceconf "$FS_CONF"
sourceconf "$FS_PROVIDER_CONF"
sourceconf "$CLUSTER_CONF"
sourceconf "$CLUSTER_ZETACA_CONF"

MYDIR=$(pwd)
MEUSER=$(whoami)

if [ "$MEUSER" != "${IUSER}" ]; then
    @go.log FATAL "This script needs to be un as ${IUSER}. Current User: $MEUSER"
fi


function _installzknode(){

    UNATTEND="0"
    NODE_HOST=""
    SUBMIT_ZK="Y"

    for i in "$@"
        do
        case $i in
            -u)
            UNATTEND="1"
            ;;
            -r)
            SUBMIT_ZK="N"
            ;;
            "-n="*)
            NODE_HOST="${i#*=}"
            ;;
            *)
            # unknown option
            ;;
        esac
    done

    if [ "$NODE_HOST" == "" ]; then
        @go.log FATAL "This script must be passed a hostname to install zookeeper on -n=node"
    fi


    NETTEST=$(ssh $NODE_HOST hostname)
    if [ "$NETTEST" == "" ]; then
        @go.log FATAL "Cannont connect to host"
    fi

    ZK_CHK=$(echo "$ZK_STRING"|grep "$NODE_HOST")
    if [ "$ZK_CHK" == "" ]; then
        echo "ZK Node provided not found in ZK_STRING in fs_mapr.conf. Please update the conf!"
        exit 1
    fi


    MAPR_DEFAULTS="./conf/mapr_defaults"
    mkdir -p $MAPR_DEFAULTS
    mkdir -p $MAPR_DEFAULTS/conf
    mkdir -p ./conf/marathon_files/zk_marathon
    rm -f $MAPR_DEFAULTS/conf/*

    . ./vers/mapr/$MAPR_VERS

    if [ ! -f "$MAPR_DEFAULTS/zk_default.tgz" ]; then
        echo "Missing zk defaults. Grabbing from a container now"

        CID=$($PRIV_CMD docker run -d ${FS_DOCKER_REG_URL}/zkdocker:${MAPR_DOCKER_TAG} sleep 15)

        $PRIV_CMD docker cp ${CID}:/opt/mapr/zookeeper/zookeeper-3.4.5/conf $MAPR_DEFAULTS
        $PRIV_CMD chown ${IUSER}:${IUSER} $MAPR_DEFAULTS/conf/*

        cd $MAPR_DEFAULTS
        cd conf
        tar zcf ../zk_default.tgz ./*
        cd $MYDIR
    fi

    OLDIFS=$IFS
    IFS=","

    for ZK in $ZK_STRING; do
        ZK_ID=$(echo $ZK|cut -d":" -f1)
        ZK_HOST=$(echo $ZK|cut -d":" -f2)

        if [ "$ZK_HOST" == "$NODE_HOST" ]; then
            echo ""
            ZKTEST=$(ssh -o StrictHostKeyChecking=no $ZK_HOST "$PRIV_CMD cat ${MAPR_INST}/zkdata/myid 2> /dev/null")
            if [ "$ZKTEST" == "" ]; then
                echo "No myid Safe to proceed"
            else
                echo "There appears to already be a zookeeper myid for $ZK_HOST"
                echo "The myid file has $ZKTEST in it"
                echo "You may overwrite and blow it away, but likely that will be bad (especially if it's running)"
                echo "Do you wish to overwrite? Answering N will cancel this process"
                read -p "Overwrite? " -e -i "N" OW
                if [ "$OW" == "Y" ]; then
                    echo "Blowing things away"
                    ssh $ZK_HOST "$PRIV_CMD rm -rf ${MAPR_INST}/zkdata"
                else
                    echo "Smart"
                    exit 0
                fi
            fi
            INST_HOST="$ZK_HOST"
            INST_ID= "$ZK_ID"
        fi
    done
    IFS=$OLDIFS


    if [ "$INST_HOST" == "" ]; then
        echo "Inst host not found, exiting"
        exit 1
    fi



    echo "Creating zoo.cfg"
    ZKOUT=$(echo -n $ZOOCFG|tr " " "\n")

tee ./conf/marathon_files/zk_marathon/zoo.cfg << EOL1
# The number of milliseconds of each tick
tickTime=2000
# The number of ticks that the initial
# synchronization phase can take
initLimit=20
# The number of ticks that can pass between
# sending a request and getting an acknowledgement
syncLimit=10
# the directory where the snapshot is stored.
dataDir=/opt/mapr/zkdata
# the port at which the clients will connect
clientPort=$ZK_CLIENT_PORT
# max number of client connections
maxClientCnxns=100
#autopurge interval - 24 hours
autopurge.purgeInterval=24
#superuser to allow zk nodes delete
superUser=$FSUSER
#readuser to allow read zk info for authenticated clients
readUser=anyone
# cldb key location
mapr.cldbkeyfile.location=/opt/mapr/conf/cldb.key
#security provider name
authMech=SIMPLE-SECURITY
# security auth provider
authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
# use maprserverticket not userticket for auth
mapr.usemaprserverticket=true
$ZKOUT
EOL1



    echo "Ok, setting up the data locations on node $NODE_HOST"
    ZK_ID="$INST_ID"
    ZK_HOST="$INST_HOST"

    echo "ID: $ZK_ID"
    echo "Host: $ZK_HOST"
    echo ""
    echo "Creating MapR Conf Dir if it doesn't exist"
    ssh $ZK_HOST "$PRIV_CMD mkdir -p ${MAPR_INST}/conf && $PRIV_CMD chown $FSUSER:$FSUSER ${MAPR_INST}/conf && $PRIV_CMD chmod 755 ${MAPR_INST}/conf"

cat > /tmp/daemon.conf << EOY
mapr.daemon.user=mapr
mapr.daemon.group=mapr
mapr.daemon.runuser.warden=1
EOY

    scp /tmp/daemon.conf $IUSER@$ZK_HOST:/home/$IUSER/
    rm /tmp/daemon.conf
    ssh $ZK_HOST "$PRIV_CMD cp /home/${IUSER}/daemon.conf /opt/maprdocker/conf/ && $PRIV_CMD rm /home/$IUSER/daemon.conf"
    echo "Creating zkdata location and setting myid"
    ssh $ZK_HOST "$PRIV_CMD mkdir -p ${MAPR_INST}/zkdata && echo $ZK_ID|$PRIV_CMD tee ${MAPR_INST}/zkdata/myid && $PRIV_CMD chown -R ${FSUSER}:${FSUSER} ${MAPR_INST}/zkdata && $PRIV_CMD chmod 750 ${MAPR_INST}/zkdata"
    echo "Creating ZK conf and log location on the host"
    ssh $ZK_HOST "$PRIV_CMD mkdir -p ${MAPR_INST}/zookeeper/logs && $PRIV_CMD mkdir -p ${MAPR_INST}/zookeeper/conf"

    echo "Copying zk defaults and cfg to $ZK_HOST"
    scp $MAPR_DEFAULTS/zk_default.tgz $ZK_HOST:/home/${IUSER}/
    scp ./conf/marathon_files/zk_marathon/zoo.cfg $ZK_HOST:/home/${IUSER}/

    echo ""
    echo "Unpacking and copying conf"
    ssh $ZK_HOST "$PRIV_CMD mv /home/${IUSER}/zk_default.tgz ${MAPR_INST}/zookeeper/conf/ && $PRIV_CMD tar zxf ${MAPR_INST}/zookeeper/conf/zk_default.tgz -C ${MAPR_INST}/zookeeper/conf && $PRIV_CMD rm ${MAPR_INST}/zookeeper/conf/zk_default.tgz"
    ssh $ZK_HOST "$PRIV_CMD mv /home/${IUSER}/zoo.cfg ${MAPR_INST}/zookeeper/conf/"
    ssh $ZK_HOST "$PRIV_CMD chown -R $FSUSER:$FSUSER ${MAPR_INST}/zookeeper && $PRIV_CMD chmod 777 ${MAPR_INST}/zookeeper/logs"
    ssh $ZK_HOST "$PRIV_CMD mkdir -p ${MAPR_INST}/zookeeper/roles && $PRIV_CMD touch ${MAPR_INST}/zookeeper/roles/zookeeper && $PRIV_CMD chown -R $FSUSER:$FSUSER ${MAPR_INST}/zookeeper/roles"


    echo "Creating marathon scripts"

    MFILE="./conf/marathon_files/zk_marathon/mapr_zk_${ZK_HOST}.marathon"

    scp $IP_DETECT ${ZK_HOST}:/home/${IUSER}/

    ZK_IP=$(ssh ${ZK_HOST} /home/${IUSER}/ip-detect)
    echo "$ZK_HOST -> $ZK_IP"

cat > $MFILE << EOFZK
{
  "id": "shared/mapr/zks/zk${ZK_HOST}",
  "cpus": 1,
  "mem": 1536,
  "cmd": "/opt/mapr/runzkdocker.sh",
  "instances": 1,
  "acceptedResourceRoles": ["slave_public", "*"],
  "constraints": [["hostname", "LIKE", "$ZK_IP"],["hostname", "UNIQUE"]],
  "labels": {
   "CONTAINERIZER":"Docker"
  },
  "env": {
  "ZOO_LOG4J_PROP": "INFO,ROLLINGFILE",
  "ZOO_LOG_DIR": "/opt/mapr/zookeeper/zookeeper-3.4.5/logs"
},
  "ports": [],
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "${FS_DOCKER_REG_URL}/zkdocker:${MAPR_DOCKER_TAG}",
      "network": "HOST"
    },
    "volumes": [
      { "containerPath": "/opt/mapr/conf", "hostPath": "${MAPR_INST}/conf", "mode": "RW" },
      { "containerPath": "/opt/mapr/roles", "hostPath": "${MAPR_INST}/zookeeper/roles", "mode": "RW" },
      { "containerPath": "/opt/mapr/zookeeper/zookeeper-3.4.5/logs", "hostPath": "${MAPR_INST}/zookeeper/logs", "mode": "RW" },
      { "containerPath": "/opt/mapr/zookeeper/zookeeper-3.4.5/conf", "hostPath": "${MAPR_INST}/zookeeper/conf", "mode": "RW" },
      { "containerPath": "/opt/mapr/zkdata", "hostPath": "${MAPR_INST}/zkdata", "mode": "RW" },
      { "containerPath": "/etc/localtime", "hostPath": "/etc/localtime", "mode": "RO"}
    ]
  }
}
EOFZK

    if [ "$SUBMIT_ZK" == "Y" ]; then
        echo ""
        @go.log INFO "Submitting ZK Node to Marathon and waiting for it to start"
        echo ""
        ./zeta cluster marathon submit "$MFILE" "$MARATHON_SUBMIT" 1
        echo ""
    fi
    echo ""
    @go.log INFO "Zookeeper installed per config"

}

_installzknode "$@"
