#!/bin/bash
#
# fs mapr updatemapr update mapr nodes
#
# Arguments:
# -u - Unattended - Will not ask "Are you sure"

sourceconf "$PREP_CONF"
sourceconf "$DCOS_CONF"
sourceconf "$NETWORK_CONF"
sourceconf "$FS_CONF"
sourceconf "$FS_PROVIDER_CONF"
sourceconf "$CLUSTER_CONF"
sourceconf "$CLUSTER_ZETACA_CONF"


MEUSER=$(whoami)

if [ "$MEUSER" != "${IUSER}" ]; then
    @go.log FATAL "This script needs to be un as ${IUSER}. Current User: $MEUSER"
fi


function _updatemapr() {
    UNATTEND="0"
    NODES=""
    for i in "$@"
        do
        case $i in
            -u)
            UNATTEND="1"
            ;;
            "-n="*)
            NODE="${i#*=}"
            ;;
            *)
            # unknown option
            ;;
        esac
    done
    if [ "$NODES" == "" ]; then
        @go.log WARN "No hosts provided with -n doing all mapr nodes"
        NODES="$AGENT_NODES"
    else
        @go.log WARN "Will only update $NODES if they are MapR Nodes"
    fi
    STD_HOSTS=""
    CLDB_HOSTS=""
    for NODE in $NODES; do
        HN=$(ssh $NODE "hostname -f")
        STD_TEST=$(echo "$INODES"|grep "$HN")
        CLDB_TEST=$(echo "$CLDBS"|grep "$HN")
        if [ "$STD_TEST" != "" ]; then
            if [ "$CLDB_TEST" != "" ]; then
                if [ "$CLDB_HOSTS" == "" ]; then
                    CLDB_HOSTS="$HN"
                else
                    CLDB_HOSTS="${CLDB_HOSTS} $HN"
                fi
            else
                if [ "$STD_HOSTS" == "" ]; then
                    STD_HOSTS="$HN"
                else
                    STD_HOSTS="${STD_HOSTS} $HN"
                fi
            fi
         fi
    done

    @go.log WARN "The curren cluster MapR Version file is $MAPR_VERS"
    read -e -p "Do you wish to change the cluster MAPR_VERS - The Updates will ensure nodes are running the cluster version. Change Vers? (Y/N): " -i "Y" CHANGE
    if [ "$CHANGE" == "Y" ]; then
        echo "The current cluster versions are: "
        ls -1 ./vers/mapr
        read -e -p "Please type a the name of the file for the new MapR version: " NEW_MAPR_VERS
        if [ ! -f "./vers/mapr/$NEW_MAPR_VERS" ]; then
            @go.log FATAL "That cluster version could not be found - exiting"
        fi
        @go.log WARN "Updating mapr version file to be $NEW_MAPR_VERS from the old $MAPR_VERS"
        sed -i "s/export MAPR_VERS=.*/export MAPR_VERS=\"$NEW_MAPR_VERS\"/g" ./conf/fs_mapr.conf
        MAPR_VERS="$NEW_MAPR_VERS"
    fi
    @go.log INFO "Now sourcing current MAPR_VERS" 
    . ./vers/mapr/$MAPR_VERS

    GOAL_TAG="maprdocker:${MAPR_DOCKER_TAG}"

    TMP_DIR="/tmp/tup"
    sudo rm -rf $TMP_DIR
    mkdir -p $TMP_DIR

    ALL_HOSTS="$STD_HOSTS $CLDB_HOSTS"
    echo "STD_HOSTS: $STD_HOSTS"
    echo "CLDB_HOSTS: $CLDB_HOSTS"
    for NODEHOST in ALL_HOSTS; do

        CLDB_CHK=$(echo $CLDB_HOSTS|grep $NODEHOST)

        if [ "$CLDB_CHK" != "" ]; then
            MAR_ID="shared/mapr/cldbs/cldb${NODEHOST}"
        else
            MAR_ID="shared/mapr/stdnodes/std${NODEHOST}"
        fi

        MARATHON_URL="$MARATHON_SUBMIT"
        FULL_URL="${MARATHON_URL}/${MAR_ID}"
        FULLRESULT=$(curl -s -X GET $FULL_URL)
        APPDEF=$(echo $FULLRESULT|jq '.app'|sed -r "/(\"version\"|\"args\"|\"user\"|\"uris\"|\"fetch\"|\"storeUrls\"|\"executor\")/d")
        CHKSTOP=$(echo "$FULLRESULT"|grep "\"instances\":0")
        if [ "$CHKSTOP" != "" ]; then
            STOPPED="True"
            @go.log INFO "Looks good, instances = 0 so things are stopped"
            IMG=$(echo "$FULLRESULT"|grep -P -o "fsdocker-shared[^,]+"|sed "s/\"//g")
            IMG_REG=$(echo "$IMG"|cut -d"/" -f1)
            IMG_TAG=$(echo "$IMG"|cut -d"/" -f2)
            GOAL_IMG="${IMG_REG}/${GOAL_TAG}"
            if [ "$IMG_TAG" != "$GOAL_TAG" ]; then
                @go.log WARN "IMAGE Tag of $IMG_TAG does not match vers goal tag of $GOAL_TAG - Updating"
                read -e -p "Should we update this? " -i "N" UPDATENODE
                if [ "$UPDATENODE" == "Y" ]; then
                    NEWAPP=$(echo "$APPDEF"|sed "s/$IMG_TAG/$GOAL_TAG/g")
                    @go.log WARN "Destroying $MAR_ID"
#                    ./zeta cluster marathon destroy $MAR_ID 1
cat > $TMP_DIR/NEWNODE_$NODEHOST.json << EOF1
$NEWAPP
EOF1
                    @go.log WARN "Submitting New"
#                    ./zeta cluster marathon submit $TMP_DIR/NEWZK_$NODEHOST.json 1
                    cat $TMP_DIR/NEWNODE_$NODEHOST.json
                    rm $TMP_DIR/NEWNODE_$NODEHOST.json
                fi

            else
                @go.log INFO "IMAGE Tag of $IMG_TAG already mataches vers goal tag of $GOAL_TAG - Not Updating"
            fi
            @go.log WARN "Host: $NODEHOST - ID: $MAR_ID - Image: $IMG - Stopped: $STOPPED"

        else
            STOPPED="False"
            @go.log WARN "We can't go on, we couldn't find instances:0"
        fi

        #curl -s -X GET $FULL_URL/tasks

        #CUR_IMG=$(./zeta cluster marathon getinfo $MAR_ID)
    done
    rm -rf $TMP_DIR
}

_updatemapr "$@"
