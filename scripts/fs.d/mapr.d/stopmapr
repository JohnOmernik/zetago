#!/bin/bash
#
# fs mapr stop - Stop MapR Cluster Components
#
# Arguments:
# -u - Unattended - Will not ask "Are you sure"
# -w - Nowait. I.e. when asking for the stop, don't wait for each to complete prior to going to the next one
# -f - Stop Fuse Clients # note - If there are things running, this could be a problem
# -n - Stop All things on a specific Node (Start with fuse, then look for CLDB, then look for Standard Node then end with Zookeeper) (Incompatible with -f, -c, -s, or -z)
# -c - Stop CLDBS
# -s - Stop Standard Nodes
# -z - Stop Zookeepers
#

sourceconf "$PREP_CONF"
sourceconf "$DCOS_CONF"
sourceconf "$NETWORK_CONF"
sourceconf "$FS_CONF"
sourceconf "$FS_PROVIDER_CONF"
sourceconf "$CLUSTER_CONF"
sourceconf "$CLUSTER_ZETACA_CONF"

. ./vers/mapr/$MAPR_VERS

MYDIR=$(pwd)

MEUSER=$(whoami)

if [ "$MEUSER" != "${IUSER}" ]; then
    @go.log FATAL "This script needs to be un as ${IUSER}. Current User: $MEUSER"
fi

function _displayhelp() {
    echo ""
    echo "./zeta fs mapr stopmapr"
    echo "To Stop MapR Services or a specific Node's MapR Services"
    echo ""
    echo "You can either:"
    echo "1. Stop specifc (or all) mapr Services (fuse, cldb, standard, or zk) on a single node by running ./zeta fs mapr stopmapr -n=%HOSTNAMEOFNODE% with (-s, -c, -z, and/or -f) specified"
    echo ""
    echo "or"
    echo ""
    echo "2. Stop specific group(s) of services on all nodes per fs_mapr.conf by providing no -n argument and then specifying:"
    echo "-c Stop all CLDB Services"
    echo "-s Stop all Standard node Services"
    echo "-f Stop all fuse Services"
    echo "-z Stop all ZK Services"
    echo ""
    echo "In addition there are two other options:"
    echo "-u Run unattended (do not prompt, just take the command line arguments as is and do not verify with interactive use... use with caution"
    echo "-w Do not wait for each service: As Services are changed, -w will not wait for each one prior to issuing the next... use with caution"
    echo ""
}

function _stopmapr() {

    UNATTEND="0"
    WAIT="1"
    FUSE_NODES="0"
    CLDB_NODES="0"
    STD_NODES="0"
    ZK_NODES="0"
    NODE_HOSTS=""

    for i in "$@"
        do
        case $i in
            -u)
            UNATTEND="1"
            ;;
            -w)
            WAIT=""
            ;;
            "-n="*)
            NODE_HOSTS="${i#*=}"
            ;;
            -f)
            FUSE_NODES="1"
            ;;
            -c)
            CLDB_NODES="1"
            ;;
            -s)
            STD_NODES="1"
            ;;
            -z)
            ZK_NODES="1"
            ;;
            *)
            # unknown option
            ;;
        esac
    done
# Sanity Checks
    if [ "$NODE_HOSTS" != "" ]; then
        @go.log WARN "NODE_HOSTS Provided: $NODE_HOSTS"
    fi

    if [ "$FUSE_NODES" == "0" ] && [ "$CLDB_NODES" == "0" ] && [ "$STD_NODES" == "0" ] && [ "$ZK_NODES" == "0" ]; then
       _displayhelp
       @go.log FATAL "No NODE_HOST specified with -n and none of the follow specified (-c, -s, -f, -z) - Nothing to do!"
    fi

    if [ "$NODE_HOST" == "" ]; then
        NODE_STR="All Nodes in fs_mapr.conf"
    else
        NODE_STR="$NODE_HOST"
    fi
    echo "=================================================="
    @go.log WARN "Stopping the Following MapR Services on $NODE_STR"
    if [ "$FUSE_NODES" == "1" ]; then
        @go.log WARN "FUSE"
    fi
    if [ "$CLDB_NODES" == "1" ]; then
        @go.log WARN "CLDB"
    fi
    if [ "$STD_NODES" == "1" ]; then
        @go.log WARN "STDNODE"
    fi
    if [ "$ZK_NODES" == "1" ]; then
        @go.log WARN "ZK"
    fi
    echo "=================================================="

    if [ "$UNATTEND" == "1" ]; then
        @go.log WARN "Unattended Selected - Will not prompt"
        OPER="Y"
    else
        read -e -p "Are you SURE you wish to run stop operations on your MapR Install? This will take down your cluster. (Y/N): " -i "N" OPER
    fi
    if [ "$OPER" != "Y" ]; then
        _displayhelp
        @go.log FATAL "Exiting out of the Install due to general cowardice"
    fi

    FUSE_HOSTS=""
    CLDB_HOSTS=""
    STD_HOSTS=""
    ZK_HOSTS=""

    if [ "$NODE_HOSTS" != "" ]; then
        for NH in $NODE_HOSTS; do
            CLDB_TEST=$(echo "$CLDBS"|grep "$NH")
            INODE_TEST=$(echo "INODES"|grep "$NH")
            ZK_TEST=$(echo "$ZK_STRING"|grep "$NH")
            if [ "$INODE_TEST" != "" ]; then
                if [ "$FUSE_HOSTS" == "" ]; then
                    FUSE_HOSTS="$NH"
                else
                    FUSE_HOSTS="${FUSE_HOSTS} $NH"
                fi
                if [ "$CLDB_TEST" != "" ]; then
                     if [ "$CLDB_HOSTS" == "" ]; then
                        CLDB_HOSTS="$NH"
                    else
                        CLDB_HOSTS="${CLDB_HOSTS} $NH"
                    fi
                else
                    if [ "$STD_HOSTS" == "" ]; then
                        STD_HOSTS="$NH"
                    else
                        STD_HOSTS="${STD_HOSTS} $NH"
                    fi
                fi
            fi
            if [ "$ZK_TEST" != "" ]; then
                if [ "$ZK_HOSTS" == "" ]; then
                    ZK_HOSTS="$NH"
                else
                    ZK_HOSTS="${ZK_HOSTS} $NH"
                fi
            fi
        done
    else
        if [ "$FUSE_NODES" == "1" ]; then
            T=$(echo "$INODES"|tr ";" " ")
            for H in $T; do
                M=$(echo "$H"|cut -d":" -f1)
                if [ "$FUSE_HOSTS" == "" ]; then
                    FUSE_HOSTS="$M"
                else
                    FUSE_HOSTS="${FUSE_HOSTS} $M"
                fi
            done
        fi
        if [ "$CLDB_NODES" == "1" ]; then
            T=$(echo "$CLDBS"|tr "," " ")
            for H in $T; do
                M=$(echo "$H"|cut -d":" -f1)
                if [ "$CLDB_HOSTS" == "" ]; then
                    CLDB_HOSTS="$M"
                else
                    CLDB_HOSTS="${CLDB_HOSTS} $M"
                fi
            done
        fi
        if [ "$STD_NODES" == "1" ]; then
            T=$(echo "$INODES"|tr ";" " ")
            for H in $T; do
                M=$(echo "$H"|cut -d":" -f1)
                CLDB_CHK=$(echo "$CLDBS"|grep "$M")
                if [ "$CLDB_CHK" == "" ]; then
                    if [ "$STD_HOSTS" == "" ]; then
                        STD_HOSTS="$M"
                    else
                        STD_HOSTS="${STD_HOSTS} $M"
                    fi
                fi
            done
        fi
        if [ "$ZK_NODES" == "1" ]; then
            T=$(echo "$ZK_STRING"|tr "," " ")
            for H in $T; do
                M=$(echo "$H"|cut -d":" -f2)
                if [ "$ZK_HOSTS" == "" ]; then
                    ZK_HOSTS="$M"
                else
                    ZK_HOSTS="${ZK_HOSTS} $M"
                fi
            done
        fi
    fi
    echo ""
    echo "FUSE_HOSTS: $FUSE_HOSTS"
    echo ""
    echo "CLDB_HOSTS: $CLDB_HOSTS"
    echo ""
    echo "STD_HOSTS: $STD_HOSTS"
    echo ""
    echo "ZK_HOSTS: $ZK_HOSTS"
    echo ""
}

_stopmapr "$@"
