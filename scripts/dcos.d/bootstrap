#!/bin/bash
#
# Bootstrap DCOS
# Connect to the boostrap node and push the config, download the docker images, dcos install, and start bootstrap server for installing DCOS
#
# No Arguments

sourceconf "$PREP_CONF"
sourceconf "$DCOS_CONF"
sourceconf "$NETWORK_CONF"
if [ "$FW_FIRST_RUN" != "1" ]; then
    @go.log FATAL "Before Installing or Bootstrapping DCOS, it's required to run the network firewall deploy via ./zeta network deployfw"
fi

ssh $BOOTSTRAP_NODE "mkdir -p $BOOTSTRAP_LOC/genconf"
./zeta dcos createipdetect "$IP_DETECT" "1"

CHKIP=$(ssh $BOOTSTRAP_NODE "cd $BOOTSTRAP_LOC && cd genconf && ls ip-detect" 2> /dev/null)
if [ "$CHKIP" == "" ]; then
    scp ./conf/ip-detect $BOOTSTRAP_NODE:$BOOTSTRAP_LOC/genconf/
else
    @go.log WARN "IP Detect already exists, skipping the creation"
fi


MASTERS=""
for MASTER in $MASTER_NODES; do
    if [ "$MASTERS" = "" ]; then
        MASTERS=""
    else
        MASTERS="${MASTERS}"$'\n'
    fi
    MASTERS="${MASTERS}- $MASTER"
done

RESOLVERS=""
for RESOLVER in $DNS_RESOLVERS; do
    if [ "$RESOLVERS" = "" ]; then
        RESOLVERS=""
    else
        RESOLVERS="${RESOLVERS}"$'\n'
    fi
    RESOLVERS="${RESOLVERS}- $RESOLVER"
done

cat > /tmp/config.yaml << EOF
---
bootstrap_url: http://$BOOTSTRAP_NODE:$BOOTSTRAP_PORT
cluster_name: $CLUSTERNAME
exhibitor_storage_backend: static
log_directory: /genconf/logs
master_discovery: static
telemetry_enabled: 'false'
master_list:
$MASTERS
process_timeout: 120
resolvers:
$RESOLVERS
dns_search: $DNS_SEARCH
process_timeout: 300
oauth_enabled: 'false'
ssh_key_path: /home/${IUSER}/.ssh/id_rsa
ssh_port: '22'
ssh_user: ${IUSER}
EOF


CHKYML=$(ssh $BOOTSTRAP_NODE "cd $BOOTSTRAP_LOC && cd genconf && ls config.yaml" 2> /dev/null)
if [ "$CHKYML" == "" ]; then
    scp /tmp/config.yaml $BOOTSTRAP_NODE:$BOOTSTRAP_LOC/genconf/
else
    @go.log WARN "Not copying config.yaml because one already exists"
fi
rm /tmp/config.yaml

CHK=$(ssh $BOOTSTRAP_NODE "cd $BOOTSTRAP_LOC && ls dcos_generate_config.sh" 2> /dev/null)

if [ "$CHK" != "" ]; then
    read -e -p "There appears to be a dcos_generate_config.sh already on the Bootstrap node in the bootstrap location. Do you wish to re-download? Answer N to use existing (Y/N): " -i "N" DL
else
    DL="Y"
fi

if [ "$DL" == "Y" ]; then
    ssh $BOOTSTRAP_NODE "cd $BOOTSTRAP_LOC && curl -O https://downloads.dcos.io/dcos/stable/dcos_generate_config.sh"
fi

CHKGENCONF=$(ssh $BOOTSTRAP_NODE "cd $BOOTSTRAP_LOC && ls *.tar" 2> /dev/null)
if [ "$CHKGENCONF" == "" ]; then
    ssh $BOOTSTRAP_NODE "cd $BOOTSTRAP_LOC && $PRIV_CMD docker pull nginx && $PRIV_CMD bash dcos_generate_config.sh"
else
    @go.log WARN "Not regenerating docker image, tar found in $BOOTSTRAP_LOC"
fi


ssh $BOOTSTRAP_NODE "cd $BOOTSTRAP_LOC && $PRIV_CMD docker run -d -p ${BOOTSTRAP_PORT}:80 -v ${BOOTSTRAP_LOC}/genconf/serve:/usr/share/nginx/html:ro nginx"

@go.log INFO "Bootstrap is running and available at http://$BOOTSTRAP_NODE:$BOOTSTRAP_PORT"
