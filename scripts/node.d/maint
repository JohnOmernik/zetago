#!/bin/bash

#
# Use a maint role to slowly drain a node for maintenance
#

sourceconf "$PREP_CONF"
sourceconf "$DCOS_CONF"
sourceconf "$NETWORK_CONF"
sourceconf "$FS_CONF"
sourceconf "$FS_PROVIDER_CONF"
sourceconf "$CLUSTER_CONF"
sourceconf "$CLUSTER_ZETACA_CONF"
sourceconf "$NODE_CONF"


function _maint(){
    UNRESERVE="0"
    RESERVE="0"
    NODE=""
    PRINCIPAL="maint"
    ROLE="maint"
    STATUS="0"
    FULL_STATUS="0"

    for i in "$@"
        do
        case $i in
            "-s")
            STATUS="1"
            ;;
            "-f")
            FULL_STATUS="1"
            ;;
            "-u")
            UNRESERVE="1"
            ;;
            "-r")
            RESERVE="1"
            ;;
            "-P="*)
            PRINCIPAL="${i#*=}"
            ;;
            "-R="*)
            ROLE="${i#*=}"
            ;;
            *)
            NODE=${i}
            # unknown option
            ;;
        esac
    done

    if [ "$NODE" == "" ]; then
        echo "Must provide a host at command line"
        echo "Reserve (Start draining) Example: ./zeta node maint -r myhost"
        echo "Unreserve Example: ./zeta node maint -u myhost"

        echo "By Default we work with the role maint with a principal of maint"
        echo "The role can be overridden with -R and the principal with -P"
        exit 1
    fi

    CUR_STATUS=$(curl -s http://leader.mesos:5050/slaves)
    AVAIL_HOSTS=$(echo "$CUR_STATUS" | jq -r  '.slaves|.[].hostname')
    CHK=$(echo "$AVAIL_HOSTS"|grep "$NODE")
    if [ "$CHK" == "" ]; then
        @go.log WARN "$NODE does not appear to be a valid hostname, it must appear in this list"
        echo "$AVAIL_HOSTS"
        exit 1
    fi

    TOT_CPU=$(echo "$CUR_STATUS" | jq --arg hn "$NODE" '.[]|.[]|select(.hostname==$hn)|.resources.cpus'|cut -d$'\n' -f1)
    USED_CPU=$(echo "$CUR_STATUS" | jq --arg hn "$NODE" '.[]|.[]|select(.hostname==$hn)|.used_resources.cpus'|cut -d$'\n' -f1)
    RES_CPU=$(echo "$CUR_STATUS" | jq --arg hn "$NODE" ".[]|.[]|select(.hostname==\$hn)|.reserved_resources.\"${ROLE}\".cpus"|cut -d$'\n' -f1)
    SLAVE_ID=$(echo "$CUR_STATUS" | jq -r --arg hn "$NODE" '.[]|.[]|select(.hostname==$hn)|.id'|cut -d$'\n' -f1)
    FREE_CPU=$(echo "$TOT_CPU - $USED_CPU - $RES_CPU"|bc)
    if [ "$RES_CPU" == "null" ]; then
        RES_CPU="0"
    fi

    echo ""
    echo "$NODE - $SLAVE_ID"
    echo ""
    echo "Total CPU: $TOT_CPU"
    echo "Used CPU: $USED_CPU"
    echo "Reserved for $ROLE with principal $PRINCIPAL: $RES_CPU"
    echo "Available CPU: $FREE_CPU"

    if [ "$UNRESERVE" == "1" ] && [ "$RESERVE" == "1" ]; then
        echo "You can't really reserve AND unreserve at the same time... might I suggest some anger management training?"
        exit 0
    fi
    if [ "$FULL_STATUS" == "1" ]; then
        echo "Full status here:"
        echo "$CUR_STATUS"| jq --arg hn "$NODE" '.[]|.[]|select(.hostname==$hn)'
    fi

    if [ "$STATUS" == "1" ]; then
        echo "Status Printed for node $NODE  No changes made!"
        exit 0
    fi

    if [ "$UNRESERVE" == "1" ]; then
        echo "As stated, the current CPU scheduled for reserve is $RES_CPU"
        read -e -p "How many CPUs would you like to unreserve on $NODE?: " -i "$RES_CPU" GOCPU
        RES="[{\"name\": \"cpus\",\"type\": \"SCALAR\", \"scalar\": { \"value\": $GOCPU },\"role\": \"$ROLE\",\"reservation\": {\"principal\": \"$PRINCIPAL\"}}]"
        echo ""
        echo "Sending Unreserve for $GOCPU to $NODE - Role: $ROLE - Principal: $PRINCIPAL"
        echo ""
        echo "$RES"
        echo ""
        echo "Command: curl -i -d slaveId=$SLAVE_ID -d resources=\"$RES\" -X POST http://leader.mesos:5050/master/unreserve"
        echo ""
        curl -i -d slaveId=$SLAVE_ID -d resources="$RES" -X POST http://leader.mesos:5050/master/unreserve
        echo ""
        echo ""
    fi
    if [ "$RESERVE" == "1" ]; then
        echo "As stated the current CPU Available to reserve for maintenance is $FREE_CPU"
        read -e -p "Host many CPUs would you like to reserve for maintenance on $NODE?: " -i "$FREE_CPU" GOCPU
        RES="[{\"name\": \"cpus\",\"type\": \"SCALAR\", \"scalar\": { \"value\": $GOCPU },\"role\": \"$ROLE\",\"reservation\": {\"principal\": \"$PRINCIPAL\"}}]"
        echo ""
        echo "Sending Reserve for $GOCPU to $NODE - Role: $ROLE - Principal: $PRINCIPAL"
        echo ""
        echo ""
        echo "$RES"
        echo ""
        echo "Command: curl -i -d slaveId=$SLAVE_ID -d resources=\"$RES\" -X POST http://leader.mesos:5050/master/reserve"
        echo ""
        curl -i -d slaveId=$SLAVE_ID -d resources="$RES" -X POST http://leader.mesos:5050/master/reserve
        echo ""
        echo ""
    fi

    if [ "$RESERVE" == "0" ] || [ "$UNRESERVE" == "0" ]; then
        echo "Showing the running tasks on node"
        echo ""
        ./zeta node run -n="$NODE" "sudo docker ps" 2> /dev/null
    fi

}


_maint "$@"












